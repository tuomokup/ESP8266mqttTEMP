#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <OneWire.h>;
#include <DallasTemperature.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>

// Data wire is plugged into port 4 on the Arduino
#define ONE_WIRE_BUS 4 // pin 4

#define DHTPIN 5          // Digital pin connected to the DHT sensor
#define DHTTYPE DHT22     // DHT 22 (AM2302)
DHT dht(DHTPIN, DHTTYPE);
float t = 0.0;
float h = 0.0;
// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;    // will store last time DHT was updated

// Updates DHT readings every 10 seconds
const long interval = 10000;  

DeviceAddress thermometerAddress;  // custom array type to hold 64 bit device address

OneWire oneWire(ONE_WIRE_BUS);  // create a oneWire instance to communicate with temperature IC
DallasTemperature sensors(&oneWire);  // pass the oneWire reference to Dallas Temperature


// Update these with values suitable for your network.

const char* ssid = "WLAN";
const char* password = "PASSWORD";
const char* mqtt_server = "MQTTSERVER";

IPAddress staticIP(xxx,xxx,x,xxx);
IPAddress gateway(xxx,xxx,x,x);
IPAddress subnet(xxx,xxx,xxx,x);

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  //WiFi.setAutoConnect(false);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_OFF);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Configures static IP address
  //if (!WiFi.config(staticIP, gateway, subnet)) {
  //  Serial.println("STA Failed to configure");
  //}


  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  Serial.println("DS18B20 Temperature IC Test");
  Serial.println("Locating devices...");
  sensors.begin();                         // initialize the temp sensor
  if (!sensors.getAddress(thermometerAddress, 0))
    Serial.println("Unable to find Device.");
  else {
    Serial.print("Device 0 Address: ");
    printAddress(thermometerAddress);
    Serial.println();
  }

  sensors.setResolution(thermometerAddress, 11);      // set the temperature resolution (9-12)
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, LOW);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("NameYOURclient", "description ");
      // ... and resubscribe
      client.subscribe("NameYOURclient");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  pinMode(0, OUTPUT);
  digitalWrite(0, LOW);
  Serial.begin(115200);
  delay(100);
  
  dht.begin();
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  /*DHT*/
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    // save the last time you updated the DHT values
    previousMillis = currentMillis;
    // Read temperature as Celsius (the default)
    float newT = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    //float newT = dht.readTemperature(true);
    // if temperature read failed, don't change t value
    if (isnan(newT)) {
      Serial.println("Failed to read from DHT sensor!");
    }
    else {
      t = newT;
      Serial.println(t);
    }
    // Read Humidity
    float newH = dht.readHumidity();
    // if humidity read failed, don't change h value 
    if (isnan(newH)) {
      Serial.println("Failed to read from DHT sensor!");
    }
    else {
      h = newH;
      Serial.println(h);
    }
  }
  /*DHT end*/

  sensors.requestTemperatures();
  float celsius = sensors.getTempCByIndex(0);
  Serial.println(sensors.getTempCByIndex(0));

  char temperaturenow [15];
  dtostrf(celsius,7, 3, temperaturenow); //// convert float to char 
 
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  //unsigned long now = millis();
  //if (now - lastMsg > 2000) {
  //  lastMsg = now;

    String payload="{\"T1\":"+String(celsius)+ ",\"H\":"+String(h)+ ",\"T2\":"+String(t)+"} ";
    payload.toCharArray(msg, (payload.length() + 1));
    client.publish("NameYOURclient", msg);
  //}
  //delay(10000);
  digitalWrite(0, LOW);
  ESP.deepSleep(0);
}

// print device address from the address array
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}